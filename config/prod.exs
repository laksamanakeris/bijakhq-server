use Mix.Config

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# BijakhqWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :bijakhq, BijakhqWeb.Endpoint,
  load_from_system_env: false,
  http: [port: "${PORT}"],
  url: [host: "${HOST}", port: "${PORT}"],
  secret_key_base: "${SECRET_KEY_BASE}",
  cache_static_manifest: "priv/static/cache_manifest.json",
  server: true

# Do not print debug messages in production
config :logger, level: :warn

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :bijakhq, BijakhqWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :bijakhq, BijakhqWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :bijakhq, BijakhqWeb.Endpoint, server: true
#

config :peerage, via: Peerage.Via.Dns,
  # This format my-svc.my-namespace.svc.cluster.local
  dns_name: "headless-service.bijakhq.svc.cluster.local",
  app_name: "bijakhq",
  interval: 1

# Finally import the config/prod.secret.exs
# which should be versioned separately.
# import_config "prod.secret.exs"


# In this file, we keep production configuration that
# you'll likely want to automate and keep away from
# your version control system.
#
# You should document the content of this
# file or create a script for recreating it, since it's
# kept out of version control and might be hard to recover
# or recreate for your teammates (or yourself later on).

  # Configure your database
config :bijakhq, Bijakhq.Repo,
  adapter: Ecto.Adapters.Postgres,
  hostname: "${DB_HOSTNAME}",
  username: "${DB_USERNAME}",
  password: "${DB_PASSWORD}",
  database: "${DB_NAME}",
  timeout: 7200_000,
  pool_size: 10


config :pay_pal,
  client_id: "${PAYPAL_CLIENT_ID}" || "AWxMCa2Ovi1wPWTfqOqnaLkkPwYfNEZj_kmStwP83UEJ5cT37mCC_dLS-3OSRzs70N4jpNHlqsC6ygFl",
  client_secret: "${PAYPAL_CLIENT_SECRET}" || "EFydo2p3fb05MQ6gtMgHSzAzLCtW_1xEVVcEIwwgOOLlcU-GEDQX0AaKFS7tHiSs0EKfuNn6rE12zvdp",
  environment: :sandbox
